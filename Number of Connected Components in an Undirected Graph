DFS

class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        graph = defaultdict(list)

        for u,v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        visited = set()

        def dfs(node):
            visited.add(node)

            for neighbour in graph[node]:
                if neighbour not in visited:
                    dfs(neighbour)
        
        number_of_components = 0
        for node in range(n):
            if node not in visited:
                number_of_components += 1
                dfs(node)
        return number_of_components

Time and Space - O(V+E)

BFS
class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        graph = defaultdict(list)

        for u,v in edges:
            graph[u].append(v)
            graph[v].append(u)\
        
        visited = set()

        def bfs(start):
            queue = deque([start])

            while queue:
                node = queue.popleft()
                if node not in visited:
                    visited.add(node)

                    for neighbour in graph[node]:
                        if neighbour not in visited:
                            queue.append(neighbour)
        
        number_of_components = 0
        for node in range(n):
            if node not in visited:
                number_of_components += 1
                bfs(node)
        return number_of_components


Time and Space - O(V+E)
