Recursion

class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        return self.fib(n-1) + self.fib(n-2)

Time - O(2^n)
Space - O(n)


Memoisation

class Solution:
    def fib(self, n: int, memo = {}) -> int:
        if n <= 1:
            return n
        if n in memo:
            return memo[n]
        memo[n] = self.fib(n-1,memo) + self.fib(n-2,memo)
        return memo[n]


Time - O(n)
Space - O(n)

Tabulation

class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        dp = [0] * (n+1)
        dp[0] = 0
        dp[1] = 1
        for i in range(2,n+1):
            dp[i] = dp[i-1]+dp[i-2]
        return dp[n]

Time - O(n)
Space - O(n)


Space Optimised Tabulation

class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        prev2 = 0
        prev1 = 1
        for _ in range(2,n+1):
            curr = prev1 + prev2
            prev2 = prev1
            prev1 = curr
        return prev1

Time - O(n)
Space - O(1)
