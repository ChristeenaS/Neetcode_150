class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if subRoot is None:
            return True
        if root is None:
            return False
        if self.isSameTree(root,subRoot):
            return True
        return (self.isSubtree(root.left,subRoot) or 
        self.isSubtree(root.right, subRoot))
        

    def isSameTree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]):
        if root is None and subRoot is None:
            return True
        if root and subRoot and root.val == subRoot.val:
            return (self.isSameTree(root.left, subRoot.left) and 
            self.isSameTree(root.right, subRoot.right))
        return False
