Array Solution - Time - O(N), Space - O(N)

class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        nodes =[]
        temp=head

        while temp:
            nodes.append(temp)
            temp = temp.next
        
        i = 0
        j = len(nodes)-1
        while i<j:
            nodes[i].next = nodes[j]
            i+=1

            if i == j:
                break

            nodes[j].next = nodes[i]
            j -=1
        
        nodes[i].next=None



class Solution: # O(N) O(1)
    def reorderList(self, head: ListNode) -> None:
        if not head:
            return

        # find the middle of linked list [Problem 876]
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # reverse the second part of the list [Problem 206]
        # convert 1->2->3->4->5 into 1->2 and 5->4->3
        prev, curr = None, slow
        while curr:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp

        # merge two sorted linked lists [Problem 21]
        # merge 1->2 and 5->4->3 into 1->5->2->4->3
        first, second = head, prev
        while second.next:
            tmp = first.next
            first.next = second
            first = tmp
            second.next, second = first, second.next
