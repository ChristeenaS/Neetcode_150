Recursion

class Solution:
    def rob_rec(self,nums,index):
        if index<0:
            return 0
        return max(self.rob_rec(nums,index-1) , nums[index]+self.rob_rec(nums,index-2))

    def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n==1:
            return nums[0]
        return max( self.rob_rec(nums[:-1],n-2), self.rob_rec(nums[1:],n-2) )

Memoisation

class Solution:
    def rob_rec(self, nums):
        memo = {}
        def rec(index):
            if index in memo:
                return memo[index]
            if index<0:
                return 0
            memo[index] = max(rec(index-1) , nums[index]+ rec(index-2))
            return memo[index]
        return rec(len(nums)-1)

    def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n==1:
            return nums[0]
        return max( self.rob_rec(nums[:-1]), self.rob_rec(nums[1:]) )

Tabulation

class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]

        def rob_tab(nums):
            n = len(nums)
            dp = [0] * n

            if n == 0:
                return 0
            if n == 1:
                return nums[0]
        
            dp[0] = nums[0]
            dp[1] = max(nums[0],nums[1])

            for i in range(2,n):
                dp[i] = max(dp[i-1] , nums[i]+dp[i-2])
        
            return dp[n-1]

        return max(rob_tab(nums[:-1]), rob_tab(nums[1:]))

Space Optimised

class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]

        def rob_tab(nums):
            n = len(nums)

            if n == 0:
                return 0
            if n == 1:
                return nums[0]
        
            prev2 = nums[0]
            prev1 = max(nums[0],nums[1])

            for i in range(2,n):
                curr = max(prev1 , nums[i]+prev2)
                prev2 = prev1
                prev1 = curr
                
            return prev1

        return max(rob_tab(nums[:-1]), rob_tab(nums[1:]))
