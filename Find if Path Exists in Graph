DFS
class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        graph = defaultdict(list)

        for u,v in edges:
            graph[u].append(v)
            graph[v].append(u)

        visited = set()
        
        def dfs(node):
            if node == destination:
                return True
            visited.add(node)
            for neighbour in graph[node]:
                if neighbour not in visited:
                    if dfs(neighbour):
                        return True  
            return False
        return dfs(source)

Time and space - O(V+E)

BFS
class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        graph = defaultdict(list)

        for u,v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        def bfs(start):
            visited = set()
            queue = deque([start])
            while queue:
                node = queue.popleft()

                if node == destination:
                    return True

                if node not in visited:
                    visited.add(node)
                    for neighbour in graph[node]:
                        if neighbour not in visited:
                              queue.append(neighbour)
            return False
        return bfs(source)

Time and space - O(V+E)
