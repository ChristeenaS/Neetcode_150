Recursion

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
       n = len(cost)

       def rec(i):
        if i == 1 or i == 0:
            return cost[i]
        return cost[i]+ min(rec(i-1) , rec(i-2))

       return min(rec(n-1),rec(n-2))

Memoisation

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
       n = len(cost)
       memo = {}

       def rec(i):
        if i in memo:
            return memo[i]
        if i == 1 or i == 0:
            memo[i] = cost[i]
        else:
            memo[i] = cost[i]+ min(rec(i-1) , rec(i-2))

        return memo[i]

       return min(rec(n-1),rec(n-2))

Tabulation

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
       n = len(cost)
       dp = [0] * n
       dp[0] = cost[0]
       dp[1] = cost[1]
       
       for i in range(2,n):
            dp[i] = cost[i]+min(dp[i-1],dp[i-2])

       return min(dp[n-1],dp[n-2])

Space Optimised

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
       n = len(cost)
       prev2 = cost[0]
       prev1 = cost[1]

       for i in range(2,n):
            curr = cost[i]+min(prev2,prev1)
            prev2 = prev1
            prev1 = curr

       return min(prev2,prev1)
